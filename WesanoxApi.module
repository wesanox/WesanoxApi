<?php
namespace ProcessWire;

class WesanoxApi extends WireData implements Module
{
    public static function getModuleInfo() : array
    {
        return array(
            'title' => 'wesanox API Connector',
            'summary' => 'A little API Connector for Processwire.',
            'version' => '0.1.2',
            'author' => 'AndrÃ© Wester',
            'icon' => 'cogs',
            'singular' => true,
            'autoload' => true,
            'installs' => ['ProcessWesanoxApi', 'FieldtypeDynamicOptions'],
            'requires' => array(
                'ProcessWire>=3.0.210',
                'PHP>=8.0.0',
            ),
        );
    }

    protected array $internal_modules = [
        'FieldtypeDynamicOptions',
    ];

    /**
     * @var Module|_Module|null $helper_fields
     */
    protected Module|_Module|null $helper_fields;

    /**
     * @var array $fields_array
     */
    protected array $fields_array = [];

    protected array $templates_option = [
        'options_generals',
    ];



    public function __construct()
    {
        parent::__construct();

        $this->helper_fields = $this->modules->get('WesanoxHelperFields');

        $this->fields_array = include $this->config->paths->WesanoxApi . 'config/fields.php';
    }

    /**
     * install function for the modul
     *
     * @return void
     * @throws WireException
     * @throws WirePermissionException
     */
    public function ___install() : void
    {
        /**
         * install the internal modules
         */
        foreach ($this->internal_modules as $moduleName) {
            if (!$this->modules->isInstalled($moduleName)) {
                $this->modules->get($moduleName);
            }
        }

        /**
         * create fields
         */
        foreach ($this->fields_array as $field_array) {
            $this->helper_fields->createFields($field_array);
        }

        /**
         * if not exists, create settings Page or add new Fields
         * to the settingspage
         */
        foreach ($this->templates_option AS $template_option) {
            if (!$this->templates->get($template_option)) {
                $fg = new Fieldgroup();
                $fg->name = $template_option;
                $fg->add('title');
                $fg->add('tab_api');
                $fg->add('repeater_api');
                $fg->add('tab_api_END');
                $fg->save();

                $t = new Template();
                $t->name = $template_option;
                $t->label = 'Einstellungen';
                $t->fieldgroup = $fg;
                $t->icon = 'cogs';
                $t->tags = 'Options';
                $t->noParents = -1;
                $t->save();
            } else {
                $t = $this->fieldgroups->get($template_option);
                $t->add('tab_api');
                $t->add('repeater_api');
                $t->add('tab_api_END');
                $t->save();
            }
        }
    }

    /**
     * uninstall the modul with the fields
     *
     * @return void
     * @throws WireException
     */
    public function ___uninstall() : void
    {
        /**
         * remove fields from option page
         */
        foreach ($this->templates_option AS $template_option) {
            if($this->templates->get($template_option)) {
                $t = $this->fieldgroups->get($template_option);
                $t->remove('tab_api');
                $t->remove('repeater_api');
                $t->remove('tab_api_END');
                $t->save();
            }
        }

        /**
         * delete fields
         */
        $this->helper_fields->deleteFields($this->fields_array);
    }

    /**
     * @return void
     */
    public function ready() : void
    {
        $this->addHookAfter('FieldtypeDynamicOptions::getSelectableOptions', $this, 'provideDynamicApi');
    }


    /**
     * @param HookEvent $event
     * @return void
     */
    public function provideDynamicApi(HookEvent $event) : void
    {
        $field = $event->arguments(1);

        if ($field->name === 'dynamic_api') {
            $settingsPage = $this->pages->get('template='.$this->template_options);
            $options = [];

            foreach ($settingsPage->repeater_api as $api) {
                $options[$api->id] = $api->api_name;
            }

            $event->return = $options;
        }
    }

    /**
     * Handles an HTTP connection and sends a request to the specified URL.
     *
     * @param string $url The base URL for the request.
     * @param string $urlSection The URL section to append to the base URL.
     * @param array $headers The headers to include in the HTTP request.
     * @param string $method The HTTP method to use for the request (default is 'GET').
     * @param mixed|null $data The data to send with the request (if applicable).
     * @return string The response received from the HTTP request.
     */
    public function connection($url, $urlSection, $headers, $method = 'GET', $data = null) : string
    {
        $http = new WireHttp();
        $http->setHeaders($headers);
        $http->setData($data);

        if (strpos($url, '/api/') !== false) {
            return $http->send($url . $urlSection, $data, $method);
        } else {
            return 'The API - URL is not correct - please check and try again.';
        }
    }
}